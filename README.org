* blob-uploader

This is an example Clojure web application written using the Duct
framework.

This project is based on the following blog article
[[https://circleci.com/blog/build-a-clojure-web-app-using-duct/][Building a Clojure web application using Duct]].

** Developing
*** Setup

When you first clone this repository, run:

#+BEGIN_SRC sh
    lein duct setup
#+END_SRC

This will create files for local configuration, and prep your system for
the project.

*** Environment

To begin developing, start with a REPL.

#+BEGIN_SRC sh
    lein repl
#+END_SRC

Then load the development environment.

#+BEGIN_SRC sh -n :sps bash :async :results none
  x -sh "lein repl" -e "user=>" -s "(dev)" -c m -i
#+END_SRC

Run =go= to prep and initiate the system.

#+BEGIN_SRC clojure
    dev=> (go)
    :duct.server.http.jetty/starting-server {:port 3000}
    :initiated
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  x -sh "lein repl" -e "user=>" -s "(dev)" -c m -e "dev=>" -s "(go)" -c m -i
#+END_SRC

#+BEGIN_EXPORT html
<!-- Play on asciinema.com -->
<!-- <a title="asciinema recording" href="https://asciinema.org/a/pwEKV1qo7emHPwjxdkLsm8kx3" target="_blank"><img alt="asciinema recording" src="https://asciinema.org/a/pwEKV1qo7emHPwjxdkLsm8kx3.svg" /></a> -->
<!-- Play on the blog -->
<script src="https://asciinema.org/a/pwEKV1qo7emHPwjxdkLsm8kx3.js" id="asciicast-pwEKV1qo7emHPwjxdkLsm8kx3" async></script>
#+END_EXPORT

By default this creates a web server at [[http://localhost:3000]].

When you make changes to your source files, use =reset= to reload any
modified files and reset the server.

#+BEGIN_SRC sh -n :sps bash :async :results none
  x -sh "lein repl" -e "user=>" -s "(dev)" -c m -e "dev=>" -s "(go)" -c m -e "dev=>" -s "(reset)" -c m -i
#+END_SRC

*** Testing

Testing is fastest through the REPL, as you avoid environment startup
time.

#+BEGIN_SRC clojure
    dev=> (test)
    ...
#+END_SRC

But you can also run tests through Leiningen.

#+BEGIN_SRC sh
    lein test
#+END_SRC

** Running in production mode

First you need to build the uberjar for the application that will be
included in the docker container(s).

#+BEGIN_SRC sh
    lein do clean, uberjar
#+END_SRC

You will need to set the =DB_PASSWORD= environment variable to a
password for the postgresql database. You can then bring up the
postgresql, migrations and web application docker instances using
=docker-compose=.

#+BEGIN_SRC sh
    docker-compose up -d
#+END_SRC

This will use the =DB_PASSWORD= to create a postgresql database. This
database will use a volume mounted for the data in a directory
=./postgresdata=.

The =docker-compose= file starts two services:

#+BEGIN_EXAMPLE
    1. Postgres database - with a start up script to create an empty
    database if not already present.
    2. FilmApp - runs migrations (if required) & starts the web
    application listening on port 3000
#+END_EXAMPLE

** Examining logs

To see the logs from the docker compose services you can use:

#+BEGIN_SRC sh
    docker-compose logs
    docker-compose logs --tail=20
    docker-compose logs blobapp
#+END_SRC

The first command shows the entire logs for both services. The second
shows the last 20 lines of the log for both services. The last command
displays the logs for just the blobapp service.

** Stopping running docker compose

To stop the docker compose services run:

#+BEGIN_SRC sh
    docker-compose down
#+END_SRC
